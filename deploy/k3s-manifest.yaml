apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        forward . /systemd-resolve/resolv.conf
        cache 30
        loop
        loadbalance
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/name: CoreDNS
spec:
  revisionHistoryLimit: 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
    spec:
      shareProcessNamespace: true
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      nodeSelector:
        beta.kubernetes.io/os: linux
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      initContainers:
      - name: coredns-init
        image: coredns-reload:v1.0
        args: [ -init ]
        volumeMounts:
        - name: config-dir
          mountPath: /coredns/conf/
        - name: config-file
          mountPath: /etc/coredns/Corefile
          subPath: Corefile
        - name: systemd-resolve
          mountPath: /systemd-resolve/
      containers:
      - name: coredns
        image: coredns/coredns:1.11.3
        args: [ -conf, /etc/coredns/conf/Corefile ]
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            add: [ NET_BIND_SERVICE ]
            drop: [ all ]
        ports:
        - name: dns
          protocol: UDP
          containerPort: 53
        - name: dns-tcp
          protocol: TCP
          containerPort: 53
        - name: metrics
          protocol: TCP
          containerPort: 9153
        readinessProbe:
          periodSeconds: 2
          initialDelaySeconds: 0
          httpGet:
            port: 8181
            path: /ready
        livenessProbe:
          initialDelaySeconds: 60
          httpGet:
            port: 8080
            path: /health
        resources:
          requests:
            cpu: 100m
            memory: 70Mi
          limits:
            memory: 170Mi
        volumeMounts:
        - name: config-dir
          mountPath: /etc/coredns/conf/
          readOnly: true
        - name: systemd-resolve
          mountPath: /systemd-resolve/
      - name: coredns-reload
        image: coredns-reload:v1.0
        args: [ -check ]
        volumeMounts:
        - name: config-dir
          mountPath: /coredns/conf/
        - name: config-file
          mountPath: /etc/coredns/Corefile
          subPath: Corefile
        - name: systemd-resolve
          mountPath: /systemd-resolve/
      dnsPolicy: Default
      volumes:
      - name: config-dir
        emptyDir: {}
      - name: config-file
        configMap:
          name: coredns
      - name: systemd-resolve
        hostPath:
          type: Directory
          path: /run/systemd/resolve/
---
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
  labels:
    k8s-app: kube-dns
    kubernetes.io/name: CoreDNS
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: 10.43.0.10
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  - name: metrics
    port: 9153
    protocol: TCP
